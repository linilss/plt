

module AbsAnn where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = PDefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def = DFun Type Id [Arg] [Stm]
  deriving (Eq, Ord, Show, Read)

data Arg = ADecl Type Id
  deriving (Eq, Ord, Show, Read)

data Stm
    = SExp Type Exp
    | SDecls Type [Id]
    | SInit Type Id Exp
    | SReturn Type Exp
    | SWhile Exp Stm
    | SBlock [Stm]
    | SIfElse Exp Stm Stm
  deriving (Eq, Ord, Show, Read)

data Exp
    = ETrue
    | EFalse
    | EInt Integer
    | EDouble Double
    | EId Id
    | EApp Id [Exp]
    | EPostIncr Id
    | EPostDecr Id
    | EPreIncr Id
    | EPreDecr Id
    | ETimes Type Exp Exp
    | EDiv Type Exp Exp
    | EPlus Type Exp Exp
    | EMinus Type Exp Exp
    | ELt Type Exp Exp
    | EGt Type Exp Exp
    | ELtEq Type Exp Exp
    | EGtEq Type Exp Exp
    | EEq Type Exp Exp
    | ENEq Type Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EAss Exp Exp
  deriving (Eq, Ord, Show, Read)

data Type = Type_bool | Type_int | Type_double | Type_void
  deriving (Eq, Ord, Show, Read)

