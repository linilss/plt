module Ann.Skel where

-- Haskell module generated by the BNF converter

import Ann.Abs
import Ann.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  PDefs defs -> failure x
transDef :: Def -> Result
transDef x = case x of
  DFun type_ id args stms -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ADecl type_ id -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SExp type_ exp -> failure x
  SDecls type_ ids -> failure x
  SInit type_ id exp -> failure x
  SReturn type_ exp -> failure x
  SWhile exp stm -> failure x
  SBlock stms -> failure x
  SIfElse exp stm1 stm2 -> failure x
transExp :: Exp -> Result
transExp x = case x of
  ETrue -> failure x
  EFalse -> failure x
  EInt integer -> failure x
  EDouble double -> failure x
  EId id -> failure x
  EApp id exps -> failure x
  EPostIncr id -> failure x
  EPostDecr id -> failure x
  EPreIncr id -> failure x
  EPreDecr id -> failure x
  ETimes type_ exp1 exp2 -> failure x
  EDiv type_ exp1 exp2 -> failure x
  EPlus type_ exp1 exp2 -> failure x
  EMinus type_ exp1 exp2 -> failure x
  ELt type_ exp1 exp2 -> failure x
  EGt type_ exp1 exp2 -> failure x
  ELtEq type_ exp1 exp2 -> failure x
  EGtEq type_ exp1 exp2 -> failure x
  EEq type_ exp1 exp2 -> failure x
  ENEq type_ exp1 exp2 -> failure x
  EAnd exp1 exp2 -> failure x
  EOr exp1 exp2 -> failure x
  EAss exp1 exp2 -> failure x
transType :: Type -> Result
transType x = case x of
  Type_bool -> failure x
  Type_int -> failure x
  Type_double -> failure x
  Type_void -> failure x

