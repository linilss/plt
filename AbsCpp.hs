

module AbsCpp where

-- Haskell module generated by the BNF converter




newtype Ref = Ref ((Int,Int),String) deriving (Eq, Ord, Show, Read)
newtype Id = Id ((Int,Int),String) deriving (Eq, Ord, Show, Read)
data Program = PDefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def
    = DUsing [QId]
    | DTD [QId] Id
    | DFun Type Id [Arg] [Stm]
    | DFunDecl Type Id [Arg]
  deriving (Eq, Ord, Show, Read)

data Arg = ACon Arg | ADecl Type Id | ANoId Type
  deriving (Eq, Ord, Show, Read)

data Stm
    = SExp Exp
    | STypedef Stm
    | SCon Stm
    | SDecl Type Id
    | SDecls Type Id [Id]
    | SInit Type Id Exp
    | SReturn Exp
    | SDoWhile Stm Exp
    | SWhile Exp Stm
    | SFor Stm Stm Exp Stm
    | SBlock [Stm]
    | SIf Exp Stm
    | SIfElse Exp Stm Stm
    | SUsing [QId]
    | SThr Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = EInt Integer
    | EString String
    | EStrings String Exp
    | EDouble Double
    | EChar Char
    | ETrue
    | EFalse
    | EQId [QId]
    | EDot Exp Exp
    | EArrow Exp Exp
    | ECall Exp [Exp]
    | EPIncr Exp
    | EPDecr Exp
    | EIndex Exp Exp
    | EIncr Exp
    | EDecr Exp
    | ENeg Exp
    | EDeRef Exp
    | ENot Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EMod Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | ERS Exp Exp
    | ELS Exp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELEq Exp Exp
    | EGEq Exp Exp
    | EEq Exp Exp
    | ENEq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EAss Exp Exp
    | ECond Exp Exp Exp
  deriving (Eq, Ord, Show, Read)

data QId = QCon Id
  deriving (Eq, Ord, Show, Read)

data Type
    = Tbool | Tdouble | Tint | Tvoid | Tchar | TQId [QId] | TRef Ref
  deriving (Eq, Ord, Show, Read)

