-- Programs are lists of function definitions

PDefs.   Program ::= [Def] ;

DFun.    Def    ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;

terminator Def "" ;

ADecl.   Arg    ::= Type Id ;

separator Arg "," ;

-- Statements

SExp.    Stm    ::= Exp ";" ;
SDecls.  Stm    ::= Type [Id] ";" ;
SInit.   Stm    ::= Type Id "=" Exp ";" ;
SReturn. Stm    ::= "return" Exp ";" ;
SWhile.  Stm    ::= "while" "(" Exp ")" Stm ;
SBlock.  Stm    ::= "{" [Stm] "}" ;
SIfElse. Stm    ::= "if" "(" Exp ")" Stm "else" Stm ;

terminator Stm "" ;

-- Expressions

ETrue.   Exp15  ::= "true" ;
EFalse.  Exp15  ::= "false" ;
EInt.    Exp15  ::= Integer ;
EDouble. Exp15  ::= Double ;
EId.     Exp15  ::= Id ;

EApp.    Exp14  ::= Id "(" [Exp] ")" ;  -- Restricted to Id.

EPostIncr.  Exp14  ::= Id "++" ;        -- Restricted to Id.
EPostDecr.  Exp14  ::= Id "--" ;        -- Restricted to Id.

EPreIncr.   Exp13  ::= "++" Id ;        -- Restricted to Id.
EPreDecr.   Exp13  ::= "--" Id ;        -- Restricted to Id.

ETimes.  Exp12  ::= Exp12 "*"  Exp13 ;  -- Left assoc.
EDiv.    Exp12  ::= Exp12 "/"  Exp13 ;  -- Left assoc.

EPlus.   Exp11  ::= Exp11 "+"  Exp12 ;  -- Left assoc.
EMinus.  Exp11  ::= Exp11 "-"  Exp12 ;  -- Left assoc.

-- Removed 10: bit shift

ELt.     Exp9   ::= Exp10 "<"  Exp10 ;  -- Non-assoc.
EGt.     Exp9   ::= Exp10 ">"  Exp10 ;  -- Non-assoc.
ELtEq.   Exp9   ::= Exp10 "<=" Exp10 ;  -- Non-assoc.
EGtEq.   Exp9   ::= Exp10 ">=" Exp10 ;  -- Non-assoc.

EEq.     Exp8   ::= Exp9  "==" Exp9  ;  -- Non-assoc.
ENEq.    Exp8   ::= Exp9  "!=" Exp9  ;  -- Non-assoc.

-- Removed 5-7: bit-wise operations

EAnd.    Exp4   ::= Exp4  "&&" Exp5  ;  -- Left assoc.

EOr.     Exp3   ::= Exp3  "||" Exp4  ;  -- Left assoc.

EAss.    Exp2   ::= Id    "="  Exp2  ;  -- Right assoc.  Restricted to Id.

-- Removed 0-1: throw, conditional

coercions Exp 15 ;

separator Exp "," ;

-- Types and identifiers

rules Type   ::= "bool" | "int" | "double" | "void" ;

token Id (letter (letter | digit | '_')*) ;

separator nonempty Id "," ;

-- Comment syntax

comment "#" ;
comment "//" ;
comment "/*" "*/" ;
PDefs. Program    ::= [Def] ;

terminator  Def "" ;

comment     "//" ;
comment     "/*" "*/" ;
comment     "#" ;

DFun.       Def     ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DFunBody.   Def     ::= Type Id "(" [Arg] ")" ";" ;
DUsing.     Def     ::= "using" [Id] ";" ;
DInit.       Def     ::= Type [Var] ";" ;
DTD.        Def     ::= "typedef" Type Id ";" ;

separator   Arg "," ;
terminator  Stm "" ;
separator   nonempty Id "::" ;

ADecl.      Arg     ::= Type Var ;
ADeclInit.  Arg     ::= Type ;


SExp.       Stm     ::= Exp ";" ;
SInit.      Stm     ::= Type [Var] ";" ;
SReturn.    Stm     ::= "return" Exp ";" ;
SWhile.     Stm     ::= "while" "(" Exp ")" Stm ;
SBlock.     Stm     ::= "{" [Stm] "}" ;
SIf.        Stm     ::= "if" "(" Exp ")" Stm ;
SIfElse.    Stm     ::= "if" "(" Exp ")" Stm "else" Stm ;
SFor.       Stm     ::= "for" "(" Type [Var] ";" Exp ";" Exp  ")" Stm ;
SDoWhile.   Stm     ::= "do" Stm "while" "(" Exp ")" ";"  ;

STD.        Stm     ::= "typedef" Type Id ";" ;

separator nonempty String "" ;
separator nonempty Var "," ;


VarDecl.  Var ::= Id ;
VarInit.  Var ::= Id "=" Exp ;

EInt.       Exp15   ::= Integer ;
EDouble.    Exp15   ::= Double ;
EString.    Exp15   ::= [String] ;
ETrue.      Exp15   ::= "true" ;
EFalse.     Exp15   ::= "false" ;
EChar.      Exp15   ::= Char ;

EQCon.      Exp15   ::= [Id] ;

ECall.      Exp14   ::= Exp14 "(" [Exp] ")" ;
EStrDot.    Exp14   ::= Exp14 "." Exp15 ;
EStrArr.    Exp14   ::= Exp14 "->" Exp15 ;
EIdx.       Exp14   ::= Exp14 "[" Exp "]" ;

EPIncr.     Exp14   ::= Exp14 "++" ;
EPDecr.     Exp14   ::= Exp14 "--" ;

EIncr.      Exp13   ::= "++" Exp13 ;
EDecr.      Exp13   ::= "--" Exp13 ;
ENeg.       Exp13   ::= "!" Exp13 ;
EMul.       Exp13   ::= "*" Exp13 ;

ETimes.     Exp12   ::= Exp12 "*" Exp13 ;
EDiv.       Exp12   ::= Exp12 "/" Exp13 ;
EMod.       Exp12   ::= Exp12 "%" Exp13 ;

EPlus.      Exp11   ::= Exp11 "+"  Exp12 ;
EMinus.     Exp11   ::= Exp11 "-"  Exp12 ;

ERS.        Exp10   ::= Exp10 ">>" Exp11 ;
ELS.        Exp10   ::= Exp10 "<<" Exp11 ;

ELt.        Exp9    ::= Exp9  "<"  Exp10 ;
EGt.        Exp9    ::= Exp9  ">"  Exp10 ;
ELtEq.      Exp9    ::= Exp9  "<=" Exp10 ;
EGtWq.      Exp9    ::= Exp9  ">=" Exp10 ;

EEq.        Exp8    ::= Exp8  "==" Exp9 ;
ENEq.       Exp8    ::= Exp8  "!=" Exp9 ;

EAnd.       Exp4    ::= Exp4  "&&" Exp5 ;

EOr.        Exp3    ::= Exp3  "||" Exp4 ;

EAss.       Exp2    ::= Exp3 "=" Exp2 ;
EAssAdd.    Exp2    ::= Exp3 "+=" Exp2 ;
EAssSub.    Exp2    ::= Exp3 "-=" Exp2 ;
ECond.      Exp2    ::= Exp3 "?" Exp2 ":" Exp2 ;

EThrow.     Exp1    ::= "throw" Exp ;

coercions   Exp 15 ;
separator   Exp "," ;
Tbool.      PType ::= "bool" ;
Tdouble.    PType ::= "double" ;
Tint.       PType ::= "int" ;
Tvoid.      PType ::= "void" ;
TChar.      PType ::= "char" ; 
TQCon.      PType ::= [Id] ;
TPType.     RType ::= PType ;
TRef.       RType ::= RType "&" ;
TRType.     Type  ::= RType ;
TConst.     Type  ::= "const" RType ;
position    token Id (letter (letter | digit | '_')*) ; 
