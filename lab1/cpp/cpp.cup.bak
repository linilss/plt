// -*- Java -*- This Cup file was machine-generated by BNFC
package cpp;

parser code {:
  public cpp.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (cpp.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal cpp.Absyn.Program Program;
nonterminal cpp.Absyn.ListDef ListDef;
nonterminal cpp.Absyn.Def Def;
nonterminal cpp.Absyn.ListArg ListArg;
nonterminal cpp.Absyn.ListStm ListStm;
nonterminal cpp.Absyn.ListId ListId;
nonterminal cpp.Absyn.Arg Arg;
nonterminal cpp.Absyn.Stm Stm;
nonterminal cpp.Absyn.ListString ListString;
nonterminal cpp.Absyn.ListVar ListVar;
nonterminal cpp.Absyn.Var Var;
nonterminal cpp.Absyn.Exp Exp15;
nonterminal cpp.Absyn.Exp Exp14;
nonterminal cpp.Absyn.Exp Exp13;
nonterminal cpp.Absyn.Exp Exp12;
nonterminal cpp.Absyn.Exp Exp11;
nonterminal cpp.Absyn.Exp Exp10;
nonterminal cpp.Absyn.Exp Exp9;
nonterminal cpp.Absyn.Exp Exp8;
nonterminal cpp.Absyn.Exp Exp4;
nonterminal cpp.Absyn.Exp Exp3;
nonterminal cpp.Absyn.Exp Exp2;
nonterminal cpp.Absyn.Exp Exp1;
nonterminal cpp.Absyn.Exp Exp;
nonterminal cpp.Absyn.Exp Exp5;
nonterminal cpp.Absyn.Exp Exp6;
nonterminal cpp.Absyn.Exp Exp7;
nonterminal cpp.Absyn.ListExp ListExp;
nonterminal cpp.Absyn.PType PType;
nonterminal cpp.Absyn.RType RType;
nonterminal cpp.Absyn.Type Type;

terminal _SYMB_0;    //   (
terminal _SYMB_1;    //   )
terminal _SYMB_2;    //   {
terminal _SYMB_3;    //   }
terminal _SYMB_4;    //   ;
terminal _SYMB_5;    //   ,
terminal _SYMB_6;    //   ::
terminal _SYMB_7;    //   =
terminal _SYMB_8;    //   .
terminal _SYMB_9;    //   ->
terminal _SYMB_10;    //   [
terminal _SYMB_11;    //   ]
terminal _SYMB_12;    //   ++
terminal _SYMB_13;    //   --
terminal _SYMB_14;    //   !
terminal _SYMB_15;    //   *
terminal _SYMB_16;    //   /
terminal _SYMB_17;    //   %
terminal _SYMB_18;    //   +
terminal _SYMB_19;    //   -
terminal _SYMB_20;    //   >>
terminal _SYMB_21;    //   <<
terminal _SYMB_22;    //   <
terminal _SYMB_23;    //   >
terminal _SYMB_24;    //   <=
terminal _SYMB_25;    //   >=
terminal _SYMB_26;    //   ==
terminal _SYMB_27;    //   !=
terminal _SYMB_28;    //   &&
terminal _SYMB_29;    //   ||
terminal _SYMB_30;    //   +=
terminal _SYMB_31;    //   -=
terminal _SYMB_32;    //   ?
terminal _SYMB_33;    //   :
terminal _SYMB_34;    //   &
terminal _SYMB_35;    //   bool
terminal _SYMB_36;    //   char
terminal _SYMB_37;    //   const
terminal _SYMB_38;    //   do
terminal _SYMB_39;    //   double
terminal _SYMB_40;    //   else
terminal _SYMB_41;    //   false
terminal _SYMB_42;    //   for
terminal _SYMB_43;    //   if
terminal _SYMB_44;    //   int
terminal _SYMB_45;    //   return
terminal _SYMB_46;    //   throw
terminal _SYMB_47;    //   true
terminal _SYMB_48;    //   typedef
terminal _SYMB_49;    //   using
terminal _SYMB_50;    //   void
terminal _SYMB_51;    //   while

terminal String _STRING_;
terminal Character _CHAR_;
terminal Integer _INTEGER_;
terminal Double _DOUBLE_;


terminal String Id;


start with Program;


Program ::= ListDef:p_1  {: RESULT = new cpp.Absyn.PDefs(p_1); :} 
;
ListDef ::=  /* empty */  {: RESULT = new cpp.Absyn.ListDef(); :} 
  | ListDef:p_1 Def:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Def ::= Type:p_1 Id:p_2 _SYMB_0 ListArg:p_4 _SYMB_1 _SYMB_2 ListStm:p_7 _SYMB_3  {: RESULT = new cpp.Absyn.DFun(p_1,p_2,p_4,p_7); :} 
  | Type:p_1 Id:p_2 _SYMB_0 ListArg:p_4 _SYMB_1 _SYMB_4  {: RESULT = new cpp.Absyn.DFunBody(p_1,p_2,p_4); :}
  | _SYMB_49 ListId:p_2 _SYMB_4  {: RESULT = new cpp.Absyn.DUsing(p_2); :}
  | Type:p_1 ListVar:p_2 _SYMB_4  {: RESULT = new cpp.Absyn.DInit(p_1,p_2); :}
  | _SYMB_48 Type:p_2 Id:p_3 _SYMB_4  {: RESULT = new cpp.Absyn.DTD(p_2,p_3); :}
;
ListArg ::=  /* empty */  {: RESULT = new cpp.Absyn.ListArg(); :} 
  | Arg:p_1  {: RESULT = new cpp.Absyn.ListArg(); RESULT.addLast(p_1); :}
  | Arg:p_1 _SYMB_5 ListArg:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListStm ::=  /* empty */  {: RESULT = new cpp.Absyn.ListStm(); :} 
  | ListStm:p_1 Stm:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
ListId ::= Id:p_1  {: RESULT = new cpp.Absyn.ListId(); RESULT.addLast(p_1); :} 
  | Id:p_1 _SYMB_6 ListId:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Arg ::= Type:p_1 Var:p_2  {: RESULT = new cpp.Absyn.ADecl(p_1,p_2); :} 
  | Type:p_1  {: RESULT = new cpp.Absyn.ADeclInit(p_1); :}
;
Stm ::= Exp:p_1 _SYMB_4  {: RESULT = new cpp.Absyn.SExp(p_1); :} 
  | Type:p_1 ListVar:p_2 _SYMB_4  {: RESULT = new cpp.Absyn.SInit(p_1,p_2); :}
  | _SYMB_45 Exp:p_2 _SYMB_4  {: RESULT = new cpp.Absyn.SReturn(p_2); :}
  | _SYMB_51 _SYMB_0 Exp:p_3 _SYMB_1 Stm:p_5  {: RESULT = new cpp.Absyn.SWhile(p_3,p_5); :}
  | _SYMB_2 ListStm:p_2 _SYMB_3  {: RESULT = new cpp.Absyn.SBlock(p_2); :}
  | _SYMB_43 _SYMB_0 Exp:p_3 _SYMB_1 Stm:p_5  {: RESULT = new cpp.Absyn.SIf(p_3,p_5); :}
  | _SYMB_43 _SYMB_0 Exp:p_3 _SYMB_1 Stm:p_5 _SYMB_40 Stm:p_7  {: RESULT = new cpp.Absyn.SIfElse(p_3,p_5,p_7); :}
  | _SYMB_42 _SYMB_0 Type:p_3 ListVar:p_4 _SYMB_4 Exp:p_6 _SYMB_4 Exp:p_8 _SYMB_1 Stm:p_10  {: RESULT = new cpp.Absyn.SFor(p_3,p_4,p_6,p_8,p_10); :}
  | _SYMB_38 Stm:p_2 _SYMB_51 _SYMB_0 Exp:p_5 _SYMB_1 _SYMB_4  {: RESULT = new cpp.Absyn.SDoWhile(p_2,p_5); :}
  | _SYMB_48 Type:p_2 Id:p_3 _SYMB_4  {: RESULT = new cpp.Absyn.STD(p_2,p_3); :}
;
ListString ::= _STRING_:p_1  {: RESULT = new cpp.Absyn.ListString(); RESULT.addLast(p_1); :} 
  | _STRING_:p_1 ListString:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
ListVar ::= Var:p_1  {: RESULT = new cpp.Absyn.ListVar(); RESULT.addLast(p_1); :} 
  | Var:p_1 _SYMB_5 ListVar:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Var ::= Id:p_1  {: RESULT = new cpp.Absyn.VarDecl(p_1); :} 
  | Id:p_1 _SYMB_7 Exp:p_3  {: RESULT = new cpp.Absyn.VarInit(p_1,p_3); :}
;
Exp15 ::= _INTEGER_:p_1  {: RESULT = new cpp.Absyn.EInt(p_1); :} 
  | _DOUBLE_:p_1  {: RESULT = new cpp.Absyn.EDouble(p_1); :}
  | ListString:p_1  {: RESULT = new cpp.Absyn.EString(p_1); :}
  | _SYMB_47  {: RESULT = new cpp.Absyn.ETrue(); :}
  | _SYMB_41  {: RESULT = new cpp.Absyn.EFalse(); :}
  | Exp15:p_1 _SYMB_0 ListExp:p_3 _SYMB_1  {: RESULT = new cpp.Absyn.EApp(p_1,p_3); :}
  | _CHAR_:p_1  {: RESULT = new cpp.Absyn.EChar(p_1); :}
  | ListId:p_1  {: RESULT = new cpp.Absyn.EQCon(p_1); :}
  | _SYMB_0 Exp:p_2 _SYMB_1  {: RESULT = p_2; :}
;
Exp14 ::= Exp14:p_1 _SYMB_0 ListExp:p_3 _SYMB_1  {: RESULT = new cpp.Absyn.ECall(p_1,p_3); :} 
  | Exp14:p_1 _SYMB_8 Exp15:p_3  {: RESULT = new cpp.Absyn.EStrDot(p_1,p_3); :}
  | Exp14:p_1 _SYMB_9 Exp15:p_3  {: RESULT = new cpp.Absyn.EStrArr(p_1,p_3); :}
  | Exp14:p_1 _SYMB_10 Exp:p_3 _SYMB_11  {: RESULT = new cpp.Absyn.EIdx(p_1,p_3); :}
  | Exp14:p_1 _SYMB_12  {: RESULT = new cpp.Absyn.EPIncr(p_1); :}
  | Exp14:p_1 _SYMB_13  {: RESULT = new cpp.Absyn.EPDecr(p_1); :}
  | Exp15:p_1  {: RESULT = p_1; :}
;
Exp13 ::= _SYMB_12 Exp13:p_2  {: RESULT = new cpp.Absyn.EIncr(p_2); :} 
  | _SYMB_13 Exp13:p_2  {: RESULT = new cpp.Absyn.EDecr(p_2); :}
  | _SYMB_14 Exp13:p_2  {: RESULT = new cpp.Absyn.ENeg(p_2); :}
  | _SYMB_15 Exp13:p_2  {: RESULT = new cpp.Absyn.EMul(p_2); :}
  | Exp14:p_1  {: RESULT = p_1; :}
;
Exp12 ::= Exp12:p_1 _SYMB_15 Exp13:p_3  {: RESULT = new cpp.Absyn.ETimes(p_1,p_3); :} 
  | Exp12:p_1 _SYMB_16 Exp13:p_3  {: RESULT = new cpp.Absyn.EDiv(p_1,p_3); :}
  | Exp12:p_1 _SYMB_17 Exp13:p_3  {: RESULT = new cpp.Absyn.EMod(p_1,p_3); :}
  | Exp13:p_1  {: RESULT = p_1; :}
;
Exp11 ::= Exp11:p_1 _SYMB_18 Exp12:p_3  {: RESULT = new cpp.Absyn.EPlus(p_1,p_3); :} 
  | Exp11:p_1 _SYMB_19 Exp12:p_3  {: RESULT = new cpp.Absyn.EMinus(p_1,p_3); :}
  | Exp12:p_1  {: RESULT = p_1; :}
;
Exp10 ::= Exp10:p_1 _SYMB_20 Exp11:p_3  {: RESULT = new cpp.Absyn.ERS(p_1,p_3); :} 
  | Exp10:p_1 _SYMB_21 Exp11:p_3  {: RESULT = new cpp.Absyn.ELS(p_1,p_3); :}
  | Exp11:p_1  {: RESULT = p_1; :}
;
Exp9 ::= Exp9:p_1 _SYMB_22 Exp10:p_3  {: RESULT = new cpp.Absyn.ELt(p_1,p_3); :} 
  | Exp9:p_1 _SYMB_23 Exp10:p_3  {: RESULT = new cpp.Absyn.EGt(p_1,p_3); :}
  | Exp9:p_1 _SYMB_24 Exp10:p_3  {: RESULT = new cpp.Absyn.ELtEq(p_1,p_3); :}
  | Exp9:p_1 _SYMB_25 Exp10:p_3  {: RESULT = new cpp.Absyn.EGtWq(p_1,p_3); :}
  | Exp10:p_1  {: RESULT = p_1; :}
;
Exp8 ::= Exp8:p_1 _SYMB_26 Exp9:p_3  {: RESULT = new cpp.Absyn.EEq(p_1,p_3); :} 
  | Exp8:p_1 _SYMB_27 Exp9:p_3  {: RESULT = new cpp.Absyn.ENEq(p_1,p_3); :}
  | Exp9:p_1  {: RESULT = p_1; :}
;
Exp4 ::= Exp4:p_1 _SYMB_28 Exp5:p_3  {: RESULT = new cpp.Absyn.EAnd(p_1,p_3); :} 
  | Exp5:p_1  {: RESULT = p_1; :}
;
Exp3 ::= Exp3:p_1 _SYMB_29 Exp4:p_3  {: RESULT = new cpp.Absyn.EOr(p_1,p_3); :} 
  | Exp4:p_1  {: RESULT = p_1; :}
;
Exp2 ::= Exp3:p_1 _SYMB_7 Exp2:p_3  {: RESULT = new cpp.Absyn.EAss(p_1,p_3); :} 
  | Exp3:p_1 _SYMB_30 Exp2:p_3  {: RESULT = new cpp.Absyn.EAssAdd(p_1,p_3); :}
  | Exp3:p_1 _SYMB_31 Exp2:p_3  {: RESULT = new cpp.Absyn.EAssSub(p_1,p_3); :}
  | Exp3:p_1 _SYMB_32 Exp2:p_3 _SYMB_33 Exp2:p_5  {: RESULT = new cpp.Absyn.ECond(p_1,p_3,p_5); :}
  | Exp3:p_1  {: RESULT = p_1; :}
;
Exp1 ::= _SYMB_46 Exp:p_2  {: RESULT = new cpp.Absyn.EThrow(p_2); :} 
  | Exp2:p_1  {: RESULT = p_1; :}
;
Exp ::= Exp1:p_1  {: RESULT = p_1; :} 
;
Exp5 ::= Exp6:p_1  {: RESULT = p_1; :} 
;
Exp6 ::= Exp7:p_1  {: RESULT = p_1; :} 
;
Exp7 ::= Exp8:p_1  {: RESULT = p_1; :} 
;
ListExp ::=  /* empty */  {: RESULT = new cpp.Absyn.ListExp(); :} 
  | Exp:p_1  {: RESULT = new cpp.Absyn.ListExp(); RESULT.addLast(p_1); :}
  | Exp:p_1 _SYMB_5 ListExp:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
PType ::= _SYMB_35  {: RESULT = new cpp.Absyn.Tbool(); :} 
  | _SYMB_39  {: RESULT = new cpp.Absyn.Tdouble(); :}
  | _SYMB_44  {: RESULT = new cpp.Absyn.Tint(); :}
  | _SYMB_50  {: RESULT = new cpp.Absyn.Tvoid(); :}
  | _SYMB_36  {: RESULT = new cpp.Absyn.TChar(); :}
  | ListId:p_1  {: RESULT = new cpp.Absyn.TQCon(p_1); :}
;
RType ::= PType:p_1  {: RESULT = new cpp.Absyn.TPType(p_1); :} 
  | RType:p_1 _SYMB_34  {: RESULT = new cpp.Absyn.TRef(p_1); :}
;
Type ::= RType:p_1  {: RESULT = new cpp.Absyn.TRType(p_1); :} 
  | _SYMB_37 RType:p_2  {: RESULT = new cpp.Absyn.TConst(p_2); :}
;

