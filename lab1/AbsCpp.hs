

module AbsCpp where

-- Haskell module generated by the BNF converter




newtype Id = Id ((Int,Int),String) deriving (Eq, Ord, Show, Read)
data Program = PDefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def
    = DFun Type Id [Arg] [Stm]
    | DFunBody Type Id [Arg]
    | DUsing [Id]
    | DInit Type [Var]
    | DTD Type Id
  deriving (Eq, Ord, Show, Read)

data Arg = ADecl Type Var | ADeclInit Type
  deriving (Eq, Ord, Show, Read)

data Stm
    = SExp Exp
    | SInit Type [Var]
    | SReturn Exp
    | SWhile Exp Stm
    | SBlock [Stm]
    | SIf Exp Stm
    | SIfElse Exp Stm Stm
    | SFor Type [Var] Exp Exp Stm
    | SDoWhile Stm Exp
    | STD Type Id
  deriving (Eq, Ord, Show, Read)

data Var = VarDecl Id | VarInit Id Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = EInt Integer
    | EDouble Double
    | EString [String]
    | ETrue
    | EFalse
    | EChar Char
    | EQCon [Id]
    | ECall Exp [Exp]
    | EStrDot Exp Exp
    | EStrArr Exp Exp
    | EIdx Exp Exp
    | EPIncr Exp
    | EPDecr Exp
    | EIncr Exp
    | EDecr Exp
    | ENeg Exp
    | EMul Exp
    | ETimes Exp Exp
    | EDiv Exp Exp
    | EMod Exp Exp
    | EPlus Exp Exp
    | EMinus Exp Exp
    | ERS Exp Exp
    | ELS Exp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELtEq Exp Exp
    | EGtWq Exp Exp
    | EEq Exp Exp
    | ENEq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EAss Exp Exp
    | EAssAdd Exp Exp
    | EAssSub Exp Exp
    | ECond Exp Exp Exp
    | EThrow Exp
  deriving (Eq, Ord, Show, Read)

data PType = Tbool | Tdouble | Tint | Tvoid | TChar | TQCon [Id]
  deriving (Eq, Ord, Show, Read)

data RType = TPType PType | TRef RType
  deriving (Eq, Ord, Show, Read)

data Type = TRType RType | TConst RType
  deriving (Eq, Ord, Show, Read)

