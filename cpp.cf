PDefs. Program    ::= [Def] ;

terminator Def "" ;

comment     "//" ;
comment     "/*" "*/" ;
comment     "#" ;
DUsing.     Def     ::= "using" QId ";";
DFun.       Def     ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
separator   Arg     "," ;
terminator  Stm     "" ;

ADecl.      Arg     ::= Type Id ;

SExp.       Stm     ::= Exp ";" ;

STypedef.   Stm     ::= "typedef" Stm ;  
SDecl.      Stm     ::= Type Id ";" ;
SDecls.     Stm     ::= Type Id "," [Id] ";" ;
SInit.      Stm     ::= Type Id "=" Exp ";" ;

SReturn.    Stm     ::= "return" Exp ";" ;
SWhile.     Stm     ::= "while" "(" Exp ")" Stm ;
SBlock.     Stm     ::= "{" [Stm] "}" ;
SIf.        Stm     ::= "if" "(" Exp ")" Stm ;
SIfElse.    Stm     ::= "if" "(" Exp ")" Stm "else" Stm ;
SUsing.     Stm     ::= "using" Exp ;


EInt.       Exp15   ::= Integer ;
EString.    Exp15   ::= String ;
EStrings.   Exp15   ::= String Exp ;
EDouble.    Exp15   ::= Double ;
ETrue.      Exp15   ::= "true" ;
EFalse.     Exp15   ::= "false" ;
EQId.       Exp15   ::= QId ;

EStrProj.   Exp14   ::= Id "." Exp ;
EStrProj.   Exp14   ::= Id "->" Exp ;
ECall.      Exp14   ::= Id "(" [Exp] ")" ;
EPIncr.     Exp14   ::= Exp15 "++" ;
EPDecr.     Exp14   ::= Exp15 "--" ;
EIndex.     Exp14   ::= Id "[" Exp "]" ;

EIncr.      Exp13   ::= "++" Exp14 ;
EDecr.      Exp13   ::= "--" Exp14 ;
ENeg.       Exp13   ::= "-"  Exp14 ;

EMul.       Exp12   ::= Exp12 "*"  Exp13 ;
EDiv.       Exp12   ::= Exp12 "/"  Exp13 ;
EMod.       Exp12   ::= Exp12 "%"  Exp13 ;

EAdd.       Exp11   ::= Exp11 "+"  Exp12 ;
ESub.       Exp11   ::= Exp11 "-"  Exp12 ;

ERS.        Exp10   ::= Exp10 ">>" Exp11 ;
ELS.        Exp10   ::= Exp10 "<<" Exp11 ;

ELt.        Exp9    ::= Exp9  "<"  Exp10 ;
EGt.        Exp9    ::= Exp9  ">"  Exp10 ;
ELEq.       Exp9    ::= Exp9  "<=" Exp10 ;
EGEq.       Exp9    ::= Exp9  ">=" Exp10 ;

EEq.        Exp8    ::= Exp8  "==" Exp9 ;
ENEq.       Exp8    ::= Exp8  "!=" Exp9 ;

EAnd.       Exp4    ::= Exp4  "&&" Exp5 ;

EOr.        Exp3    ::= Exp3  "||" Exp4 ;
EAss.       Exp2    ::= Exp3 "=" Exp2 ;
ECond.      Exp2    ::= Exp3 "?" Exp2 ":" Exp2 ;

coercions   Exp 15 ;
separator   Exp "," ;
separator   nonempty Id "," ;
separator   nonempty QId "::" ;

QIdent.     QId     ::= Id ;
QIdElemId.  QIdElem ::= Id;
QIdElems.   QId     ::= [QIdElem] ;
separator   nonempty QIdElem "::" ;

Tbool.      Type    ::= "bool" ;
Tdouble.    Type    ::= "double" ;
Tint.       Type    ::= "int" ;
Tvoid.      Type    ::= "void" ;
TQConst.    Type    ::= QId;


position token Id (letter (letter | digit | '_')*) ;