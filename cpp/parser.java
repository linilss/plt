
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cpp;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\004\000\002\004\012\000\002\004\010" +
    "\000\002\004\005\000\002\004\005\000\002\004\006\000" +
    "\002\005\002\000\002\005\003\000\002\005\005\000\002" +
    "\006\002\000\002\006\004\000\002\007\003\000\002\007" +
    "\005\000\002\010\004\000\002\010\003\000\002\011\004" +
    "\000\002\011\005\000\002\011\005\000\002\011\007\000" +
    "\002\011\005\000\002\011\007\000\002\011\011\000\002" +
    "\011\014\000\002\011\011\000\002\011\006\000\002\012" +
    "\003\000\002\012\004\000\002\013\003\000\002\013\005" +
    "\000\002\014\003\000\002\014\005\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\006\000\002\015\003\000\002\015" +
    "\003\000\002\015\005\000\002\016\006\000\002\016\005" +
    "\000\002\016\005\000\002\016\006\000\002\016\004\000" +
    "\002\016\004\000\002\016\003\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\003\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\003\000\002\021\005\000\002\021\005\000" +
    "\002\021\003\000\002\022\005\000\002\022\005\000\002" +
    "\022\003\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\003\000\002\024\005" +
    "\000\002\024\005\000\002\024\003\000\002\025\005\000" +
    "\002\025\003\000\002\026\005\000\002\026\003\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\007\000\002\027\003\000\002\030\004\000\002\030\003" +
    "\000\002\031\003\000\002\032\003\000\002\033\003\000" +
    "\002\034\003\000\002\035\002\000\002\035\003\000\002" +
    "\035\005\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\037\003\000\002\037\004\000\002\040\003\000" +
    "\002\040\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\026\002\uffff\047\uffff\050\uffff\051\uffff\053" +
    "\uffff\060\uffff\064\uffff\065\uffff\066\uffff\074\uffff\001\002" +
    "\000\004\002\300\001\002\000\026\002\000\047\022\050" +
    "\021\051\020\053\017\060\015\064\014\065\012\066\013" +
    "\074\011\001\002\000\004\074\036\001\002\000\012\005" +
    "\uffa0\011\uffa0\046\uffa0\074\uffa0\001\002\000\026\002\ufffe" +
    "\047\ufffe\050\ufffe\051\ufffe\053\ufffe\060\ufffe\064\ufffe\065" +
    "\ufffe\066\ufffe\074\ufffe\001\002\000\104\004\ufff3\005\ufff3" +
    "\010\ufff3\011\ufff3\012\033\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3" +
    "\043\ufff3\044\ufff3\045\ufff3\046\ufff3\074\ufff3\001\002\000" +
    "\004\074\011\001\002\000\012\005\uffa3\011\uffa3\046\uffa3" +
    "\074\uffa3\001\002\000\020\047\022\050\021\051\020\053" +
    "\017\060\015\066\013\074\011\001\002\000\012\005\uffa4" +
    "\011\uffa4\046\uffa4\074\uffa4\001\002\000\012\005\uffa1\011" +
    "\uffa1\046\uffa1\074\uffa1\001\002\000\012\005\uffa5\011\uffa5" +
    "\046\uffa5\074\uffa5\001\002\000\016\047\022\050\021\053" +
    "\017\060\015\066\013\074\011\001\002\000\012\005\uffa2" +
    "\011\uffa2\046\uffa2\074\uffa2\001\002\000\012\005\uffa6\011" +
    "\uffa6\046\uffa6\074\uffa6\001\002\000\012\005\uff9e\011\uff9e" +
    "\046\024\074\uff9e\001\002\000\012\005\uff9f\011\uff9f\046" +
    "\uff9f\074\uff9f\001\002\000\012\005\uff9d\011\uff9d\046\024" +
    "\074\uff9d\001\002\000\004\074\027\001\002\000\004\010" +
    "\030\001\002\000\026\002\ufff9\047\ufff9\050\ufff9\051\ufff9" +
    "\053\ufff9\060\ufff9\064\ufff9\065\ufff9\066\ufff9\074\ufff9\001" +
    "\002\000\004\010\032\001\002\000\026\002\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\053\ufffb\060\ufffb\064\ufffb\065\ufffb\066" +
    "\ufffb\074\ufffb\001\002\000\004\074\011\001\002\000\102" +
    "\004\ufff2\005\ufff2\010\ufff2\011\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\023\ufff2\024\ufff2" +
    "\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\074\ufff2\001" +
    "\002\000\004\010\277\001\002\000\012\004\205\010\uffe1" +
    "\011\uffe1\013\043\001\002\000\006\010\uffe3\011\040\001" +
    "\002\000\004\074\042\001\002\000\004\010\uffe2\001\002" +
    "\000\012\005\uffe1\010\uffe1\011\uffe1\013\043\001\002\000" +
    "\034\004\067\020\057\021\056\022\055\023\052\055\061" +
    "\062\053\063\051\070\047\071\062\072\044\073\054\074" +
    "\011\001\002\000\076\004\uffdf\005\uffdf\010\uffdf\011\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf" +
    "\001\002\000\064\004\uffc4\005\uffc4\010\uffc4\011\uffc4\013" +
    "\uffc4\017\uffc4\023\165\024\164\025\163\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\001\002\000\056\004\uffc1\005\uffc1\010\uffc1\011" +
    "\uffc1\013\uffc1\017\uffc1\026\161\027\160\030\uffc1\031\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\001\002" +
    "\000\100\004\uffe5\005\uffe5\010\uffe5\011\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\070\047\001" +
    "\002\000\052\004\uffbc\005\uffbc\010\uffbc\011\uffbc\013\uffbc" +
    "\017\uffbc\030\156\031\155\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\001\002\000\076\004\uffdc\005\uffdc\010" +
    "\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\001\002\000\034\004\067\020\057\021\056" +
    "\022\055\023\052\055\061\062\053\063\051\070\047\071" +
    "\062\072\044\073\054\074\011\001\002\000\034\004\067" +
    "\020\057\021\056\022\055\023\052\055\061\062\053\063" +
    "\051\070\047\071\062\072\044\073\054\074\011\001\002" +
    "\000\076\004\uffde\005\uffde\010\uffde\011\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\001\002\000" +
    "\034\004\067\020\057\021\056\022\055\023\052\055\061" +
    "\062\053\063\051\070\047\071\062\072\044\073\054\074" +
    "\011\001\002\000\034\004\067\020\057\021\056\022\055" +
    "\023\052\055\061\062\053\063\051\070\047\071\062\072" +
    "\044\073\054\074\011\001\002\000\034\004\067\020\057" +
    "\021\056\022\055\023\052\055\061\062\053\063\051\070" +
    "\047\071\062\072\044\073\054\074\011\001\002\000\076" +
    "\004\uffdd\005\uffdd\010\uffdd\011\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\045\uffdd\001\002\000\076\004" +
    "\uffdb\005\uffdb\010\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\001\002\000\076\004\uffd9" +
    "\005\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\044\uffd9\045\uffd9\001\002\000\046\004\uffb9\005" +
    "\uffb9\010\uffb9\011\uffb9\013\uffb9\017\uffb9\032\150\033\153" +
    "\034\152\035\151\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\001\002\000\036\004\uffaa" +
    "\005\uffaa\010\uffaa\011\uffaa\013\uffaa\017\uffaa\036\146\037" +
    "\145\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa" +
    "\001\002\000\032\004\uffab\005\uffab\010\uffab\011\uffab\013" +
    "\uffab\017\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\001\002\000\032\004\uffac\005\uffac\010\uffac\011" +
    "\uffac\013\uffac\017\uffac\040\uffac\041\uffac\042\uffac\043\uffac" +
    "\044\uffac\045\uffac\001\002\000\034\004\067\020\057\021" +
    "\056\022\055\023\052\055\061\062\053\063\051\070\047" +
    "\071\062\072\044\073\054\074\011\001\002\000\012\004" +
    "\112\005\uffe0\010\uffe0\011\uffe0\001\002\000\032\004\uffb7" +
    "\005\uffb7\010\uffb7\011\uffb7\013\uffb7\017\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\001\002\000\032" +
    "\004\uffb5\005\uffb5\010\uffb5\011\uffb5\013\uffb5\017\uffb5\040" +
    "\135\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\001\002" +
    "\000\030\004\uffb0\005\uffb0\010\uffb0\011\uffb0\013\131\017" +
    "\uffb0\041\127\042\130\043\126\044\125\045\uffb0\001\002" +
    "\000\014\004\uffae\005\uffae\010\uffae\011\uffae\017\uffae\001" +
    "\002\000\014\004\uffad\005\uffad\010\uffad\011\uffad\017\uffad" +
    "\001\002\000\076\004\uffd0\005\uffd0\010\uffd0\011\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\001" +
    "\002\000\076\004\uffd8\005\uffd8\010\uffd8\011\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\001\002" +
    "\000\076\004\103\005\uffcb\010\uffcb\011\uffcb\013\uffcb\014" +
    "\105\015\104\016\102\017\uffcb\020\107\021\106\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\001\002\000" +
    "\064\004\uffc7\005\uffc7\010\uffc7\011\uffc7\013\uffc7\017\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\001" +
    "\002\000\034\004\067\020\057\021\056\022\055\023\052" +
    "\055\061\062\053\063\051\070\047\071\062\072\044\073" +
    "\054\074\011\001\002\000\036\004\067\005\uffa9\020\057" +
    "\021\056\022\055\023\052\055\061\062\053\063\051\070" +
    "\047\071\062\072\044\073\054\074\011\001\002\000\034" +
    "\004\067\020\057\021\056\022\055\023\052\055\061\062" +
    "\053\063\051\070\047\071\062\072\044\073\054\074\011" +
    "\001\002\000\034\004\067\020\057\021\056\022\055\023" +
    "\052\055\061\062\053\063\051\070\047\071\062\072\044" +
    "\073\054\074\011\001\002\000\076\004\uffd1\005\uffd1\010" +
    "\uffd1\011\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\045\uffd1\001\002\000\076\004\uffd2\005\uffd2\010\uffd2" +
    "\011\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\001\002\000\004\004\112\001\002\000\076\004" +
    "\uffd5\005\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\001\002\000\036\004\067" +
    "\005\uffa9\020\057\021\056\022\055\023\052\055\061\062" +
    "\053\063\051\070\047\071\062\072\044\073\054\074\011" +
    "\001\002\000\004\005\117\001\002\000\010\004\112\005" +
    "\uffa8\011\115\001\002\000\036\004\067\005\uffa9\020\057" +
    "\021\056\022\055\023\052\055\061\062\053\063\051\070" +
    "\047\071\062\072\044\073\054\074\011\001\002\000\004" +
    "\005\uffa7\001\002\000\076\004\uffda\005\uffda\010\uffda\011" +
    "\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045" +
    "\uffda\001\002\000\076\004\uffd4\005\uffd4\010\uffd4\011\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\001\002\000\004\005\122\001\002\000\076\004\uffd6\005" +
    "\uffd6\010\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\045\uffd6\001\002\000\006\004\112\017\124" +
    "\001\002\000\076\004\uffd3\005\uffd3\010\uffd3\011\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\001" +
    "\002\000\034\004\067\020\057\021\056\022\055\023\052" +
    "\055\061\062\053\063\051\070\047\071\062\072\044\073" +
    "\054\074\011\001\002\000\034\004\067\020\057\021\056" +
    "\022\055\023\052\055\061\062\053\063\051\070\047\071" +
    "\062\072\044\073\054\074\011\001\002\000\034\004\067" +
    "\020\057\021\056\022\055\023\052\055\061\062\053\063" +
    "\051\070\047\071\062\072\044\073\054\074\011\001\002" +
    "\000\034\004\067\020\057\021\056\022\055\023\052\055" +
    "\061\062\053\063\051\070\047\071\062\072\044\073\054" +
    "\074\011\001\002\000\034\004\067\020\057\021\056\022" +
    "\055\023\052\055\061\062\053\063\051\070\047\071\062" +
    "\072\044\073\054\074\011\001\002\000\016\004\uffb4\005" +
    "\uffb4\010\uffb4\011\uffb4\017\uffb4\045\uffb4\001\002\000\016" +
    "\004\uffb3\005\uffb3\010\uffb3\011\uffb3\017\uffb3\045\uffb3\001" +
    "\002\000\032\004\uffb6\005\uffb6\010\uffb6\011\uffb6\013\uffb6" +
    "\017\uffb6\040\135\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\001\002\000\034\004\067\020\057\021\056\022\055" +
    "\023\052\055\061\062\053\063\051\070\047\071\062\072" +
    "\044\073\054\074\011\001\002\000\032\004\uffb8\005\uffb8" +
    "\010\uffb8\011\uffb8\013\uffb8\017\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\001\002\000\016\004\uffb2" +
    "\005\uffb2\010\uffb2\011\uffb2\017\uffb2\045\uffb2\001\002\000" +
    "\006\004\uffae\045\141\001\002\000\034\004\067\020\057" +
    "\021\056\022\055\023\052\055\061\062\053\063\051\070" +
    "\047\071\062\072\044\073\054\074\011\001\002\000\016" +
    "\004\uffb1\005\uffb1\010\uffb1\011\uffb1\017\uffb1\045\uffb1\001" +
    "\002\000\006\004\112\005\144\001\002\000\076\004\uffd7" +
    "\005\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\001\002\000\034\004\067\020" +
    "\057\021\056\022\055\023\052\055\061\062\053\063\051" +
    "\070\047\071\062\072\044\073\054\074\011\001\002\000" +
    "\034\004\067\020\057\021\056\022\055\023\052\055\061" +
    "\062\053\063\051\070\047\071\062\072\044\073\054\074" +
    "\011\001\002\000\046\004\uffbb\005\uffbb\010\uffbb\011\uffbb" +
    "\013\uffbb\017\uffbb\032\150\033\153\034\152\035\151\036" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\001\002\000\034\004\067\020\057\021\056\022" +
    "\055\023\052\055\061\062\053\063\051\070\047\071\062" +
    "\072\044\073\054\074\011\001\002\000\034\004\067\020" +
    "\057\021\056\022\055\023\052\055\061\062\053\063\051" +
    "\070\047\071\062\072\044\073\054\074\011\001\002\000" +
    "\034\004\067\020\057\021\056\022\055\023\052\055\061" +
    "\062\053\063\051\070\047\071\062\072\044\073\054\074" +
    "\011\001\002\000\034\004\067\020\057\021\056\022\055" +
    "\023\052\055\061\062\053\063\051\070\047\071\062\072" +
    "\044\073\054\074\011\001\002\000\052\004\uffbf\005\uffbf" +
    "\010\uffbf\011\uffbf\013\uffbf\017\uffbf\030\156\031\155\032" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\001\002\000" +
    "\034\004\067\020\057\021\056\022\055\023\052\055\061" +
    "\062\053\063\051\070\047\071\062\072\044\073\054\074" +
    "\011\001\002\000\034\004\067\020\057\021\056\022\055" +
    "\023\052\055\061\062\053\063\051\070\047\071\062\072" +
    "\044\073\054\074\011\001\002\000\056\004\uffc3\005\uffc3" +
    "\010\uffc3\011\uffc3\013\uffc3\017\uffc3\026\161\027\160\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\001\002\000\034\004\067\020\057\021\056\022\055" +
    "\023\052\055\061\062\053\063\051\070\047\071\062\072" +
    "\044\073\054\074\011\001\002\000\034\004\067\020\057" +
    "\021\056\022\055\023\052\055\061\062\053\063\051\070" +
    "\047\071\062\072\044\073\054\074\011\001\002\000\064" +
    "\004\uffc6\005\uffc6\010\uffc6\011\uffc6\013\uffc6\017\uffc6\023" +
    "\165\024\164\025\163\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\001\002" +
    "\000\034\004\067\020\057\021\056\022\055\023\052\055" +
    "\061\062\053\063\051\070\047\071\062\072\044\073\054" +
    "\074\011\001\002\000\034\004\067\020\057\021\056\022" +
    "\055\023\052\055\061\062\053\063\051\070\047\071\062" +
    "\072\044\073\054\074\011\001\002\000\034\004\067\020" +
    "\057\021\056\022\055\023\052\055\061\062\053\063\051" +
    "\070\047\071\062\072\044\073\054\074\011\001\002\000" +
    "\064\004\uffca\005\uffca\010\uffca\011\uffca\013\uffca\017\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\001" +
    "\002\000\064\004\uffc9\005\uffc9\010\uffc9\011\uffc9\013\uffc9" +
    "\017\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\001\002\000\064\004\uffc8\005\uffc8\010\uffc8\011\uffc8" +
    "\013\uffc8\017\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\001\002\000\064\004\uffc5\005\uffc5\010\uffc5" +
    "\011\uffc5\013\uffc5\017\uffc5\023\165\024\164\025\163\026" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\001\002\000\056\004\uffc2\005\uffc2" +
    "\010\uffc2\011\uffc2\013\uffc2\017\uffc2\026\161\027\160\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\001\002\000\052\004\uffbe\005\uffbe\010\uffbe\011\uffbe" +
    "\013\uffbe\017\uffbe\030\156\031\155\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\001\002\000\052\004\uffbd\005" +
    "\uffbd\010\uffbd\011\uffbd\013\uffbd\017\uffbd\030\156\031\155" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\001\002" +
    "\000\052\004\uffc0\005\uffc0\010\uffc0\011\uffc0\013\uffc0\017" +
    "\uffc0\030\156\031\155\032\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\001\002\000\046\004\uffba\005\uffba\010\uffba" +
    "\011\uffba\013\uffba\017\uffba\032\150\033\153\034\152\035" +
    "\151\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba" +
    "\044\uffba\045\uffba\001\002\000\064\004\uffcf\005\uffcf\010" +
    "\uffcf\011\uffcf\013\uffcf\017\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\001\002\000\064\004\uffce\005" +
    "\uffce\010\uffce\011\uffce\013\uffce\017\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\001\002\000\064\004" +
    "\uffcd\005\uffcd\010\uffcd\011\uffcd\013\uffcd\017\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\001\002\000" +
    "\014\004\112\005\uffaf\010\uffaf\011\uffaf\017\uffaf\001\002" +
    "\000\064\004\uffcc\005\uffcc\010\uffcc\011\uffcc\013\uffcc\017" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\001\002\000\076\004\uffe4\005\uffe4\010\uffe4\011\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\001" +
    "\002\000\022\005\ufff8\047\022\050\021\051\020\053\017" +
    "\060\015\066\013\074\011\001\002\000\010\005\ufff0\011" +
    "\ufff0\074\042\001\002\000\004\005\213\001\002\000\006" +
    "\005\ufff7\011\211\001\002\000\022\005\ufff8\047\022\050" +
    "\021\051\020\053\017\060\015\066\013\074\011\001\002" +
    "\000\004\005\ufff6\001\002\000\006\006\215\010\214\001" +
    "\002\000\026\002\ufffc\047\ufffc\050\ufffc\051\ufffc\053\ufffc" +
    "\060\ufffc\064\ufffc\065\ufffc\066\ufffc\074\ufffc\001\002\000" +
    "\070\004\ufff5\006\ufff5\007\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5" +
    "\064\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\073" +
    "\ufff5\074\ufff5\001\002\000\070\004\067\006\224\007\223" +
    "\020\057\021\056\022\055\023\052\047\022\050\021\051" +
    "\020\052\225\053\017\055\061\056\222\057\221\060\015" +
    "\061\220\062\053\063\051\064\217\066\013\067\231\070" +
    "\047\071\062\072\044\073\054\074\011\001\002\000\020" +
    "\047\022\050\021\051\020\053\017\060\015\066\013\074" +
    "\011\001\002\000\034\004\067\020\057\021\056\022\055" +
    "\023\052\055\061\062\053\063\051\070\047\071\062\072" +
    "\044\073\054\074\011\001\002\000\004\004\263\001\002" +
    "\000\004\004\252\001\002\000\026\002\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\053\ufffd\060\ufffd\064\ufffd\065\ufffd\066\ufffd" +
    "\074\ufffd\001\002\000\070\004\ufff5\006\ufff5\007\ufff5\020" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\052\ufff5\053\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061" +
    "\ufff5\062\ufff5\063\ufff5\064\ufff5\066\ufff5\067\ufff5\070\ufff5" +
    "\071\ufff5\072\ufff5\073\ufff5\074\ufff5\001\002\000\066\004" +
    "\067\006\224\020\057\021\056\022\055\023\052\047\022" +
    "\050\021\051\020\052\225\053\017\055\061\056\222\057" +
    "\221\060\015\061\220\062\053\063\051\064\217\066\013" +
    "\067\231\070\047\071\062\072\044\073\054\074\011\001" +
    "\002\000\070\004\ufff4\006\ufff4\007\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053" +
    "\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4" +
    "\063\ufff4\064\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072" +
    "\ufff4\073\ufff4\074\ufff4\001\002\000\072\004\uffd8\010\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\046\uffa1\074\uffa1" +
    "\001\002\000\006\004\112\010\241\001\002\000\004\004" +
    "\235\001\002\000\004\074\042\001\002\000\004\010\234" +
    "\001\002\000\072\004\uffee\006\uffee\007\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\047\uffee\050\uffee\051\uffee\052\uffee" +
    "\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061" +
    "\uffee\062\uffee\063\uffee\064\uffee\066\uffee\067\uffee\070\uffee" +
    "\071\uffee\072\uffee\073\uffee\074\uffee\001\002\000\034\004" +
    "\067\020\057\021\056\022\055\023\052\055\061\062\053" +
    "\063\051\070\047\071\062\072\044\073\054\074\011\001" +
    "\002\000\006\004\112\005\237\001\002\000\066\004\067" +
    "\006\224\020\057\021\056\022\055\023\052\047\022\050" +
    "\021\051\020\052\225\053\017\055\061\056\222\057\221" +
    "\060\015\061\220\062\053\063\051\064\217\066\013\067" +
    "\231\070\047\071\062\072\044\073\054\074\011\001\002" +
    "\000\072\004\uffec\006\uffec\007\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec" +
    "\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062" +
    "\uffec\063\uffec\064\uffec\066\uffec\067\uffec\070\uffec\071\uffec" +
    "\072\uffec\073\uffec\074\uffec\001\002\000\072\004\uffef\006" +
    "\uffef\007\uffef\020\uffef\021\uffef\022\uffef\023\uffef\047\uffef" +
    "\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056" +
    "\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef" +
    "\066\uffef\067\uffef\070\uffef\071\uffef\072\uffef\073\uffef\074" +
    "\uffef\001\002\000\004\067\243\001\002\000\004\004\244" +
    "\001\002\000\034\004\067\020\057\021\056\022\055\023" +
    "\052\055\061\062\053\063\051\070\047\071\062\072\044" +
    "\073\054\074\011\001\002\000\006\004\112\005\246\001" +
    "\002\000\004\010\247\001\002\000\072\004\uffe7\006\uffe7" +
    "\007\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\047\uffe7\050" +
    "\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7" +
    "\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\066" +
    "\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7" +
    "\001\002\000\070\004\067\006\224\007\251\020\057\021" +
    "\056\022\055\023\052\047\022\050\021\051\020\052\225" +
    "\053\017\055\061\056\222\057\221\060\015\061\220\062" +
    "\053\063\051\064\217\066\013\067\231\070\047\071\062" +
    "\072\044\073\054\074\011\001\002\000\072\004\uffeb\006" +
    "\uffeb\007\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\047\uffeb" +
    "\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb" +
    "\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074" +
    "\uffeb\001\002\000\020\047\022\050\021\051\020\053\017" +
    "\060\015\066\013\074\011\001\002\000\004\074\042\001" +
    "\002\000\004\010\255\001\002\000\034\004\067\020\057" +
    "\021\056\022\055\023\052\055\061\062\053\063\051\070" +
    "\047\071\062\072\044\073\054\074\011\001\002\000\006" +
    "\004\112\010\257\001\002\000\034\004\067\020\057\021" +
    "\056\022\055\023\052\055\061\062\053\063\051\070\047" +
    "\071\062\072\044\073\054\074\011\001\002\000\006\004" +
    "\112\005\261\001\002\000\066\004\067\006\224\020\057" +
    "\021\056\022\055\023\052\047\022\050\021\051\020\052" +
    "\225\053\017\055\061\056\222\057\221\060\015\061\220" +
    "\062\053\063\051\064\217\066\013\067\231\070\047\071" +
    "\062\072\044\073\054\074\011\001\002\000\072\004\uffe8" +
    "\006\uffe8\007\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064" +
    "\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8" +
    "\074\uffe8\001\002\000\034\004\067\020\057\021\056\022" +
    "\055\023\052\055\061\062\053\063\051\070\047\071\062" +
    "\072\044\073\054\074\011\001\002\000\006\004\112\005" +
    "\265\001\002\000\066\004\067\006\224\020\057\021\056" +
    "\022\055\023\052\047\022\050\021\051\020\052\225\053" +
    "\017\055\061\056\222\057\221\060\015\061\220\062\053" +
    "\063\051\064\217\066\013\067\231\070\047\071\062\072" +
    "\044\073\054\074\011\001\002\000\072\004\uffea\006\uffea" +
    "\007\uffea\020\uffea\021\uffea\022\uffea\023\uffea\047\uffea\050" +
    "\uffea\051\uffea\052\uffea\053\uffea\054\267\055\uffea\056\uffea" +
    "\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\066" +
    "\uffea\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea" +
    "\001\002\000\066\004\067\006\224\020\057\021\056\022" +
    "\055\023\052\047\022\050\021\051\020\052\225\053\017" +
    "\055\061\056\222\057\221\060\015\061\220\062\053\063" +
    "\051\064\217\066\013\067\231\070\047\071\062\072\044" +
    "\073\054\074\011\001\002\000\072\004\uffe9\006\uffe9\007" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057" +
    "\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\066\uffe9" +
    "\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\001" +
    "\002\000\006\004\112\010\272\001\002\000\072\004\uffed" +
    "\006\uffed\007\uffed\020\uffed\021\uffed\022\uffed\023\uffed\047" +
    "\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed" +
    "\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064" +
    "\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed" +
    "\074\uffed\001\002\000\004\074\274\001\002\000\004\010" +
    "\275\001\002\000\072\004\uffe6\006\uffe6\007\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\047\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6" +
    "\061\uffe6\062\uffe6\063\uffe6\064\uffe6\066\uffe6\067\uffe6\070" +
    "\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\001\002\000\006" +
    "\005\ufff1\011\ufff1\001\002\000\026\002\ufffa\047\ufffa\050" +
    "\ufffa\051\ufffa\053\ufffa\060\ufffa\064\ufffa\065\ufffa\066\ufffa" +
    "\074\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\014\004\007\007\015\036\006\037\022\040\005" +
    "\001\001\000\006\013\034\014\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\030" +
    "\001\001\000\002\001\001\000\012\007\015\036\006\037" +
    "\022\040\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\015\036\006\037\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\040\014\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\007\076\012\057\015\075\016\077\017\100" +
    "\020\044\021\045\022\047\023\062\024\063\025\071\026" +
    "\072\027\073\030\074\031\067\032\070\033\065\034\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\007\076\012\057\015\075\016\077\017" +
    "\202\020\044\021\045\022\047\023\062\024\063\025\071" +
    "\026\072\027\073\030\074\031\107\032\070\033\065\034" +
    "\064\001\001\000\046\007\076\012\057\015\075\016\077" +
    "\017\100\020\044\021\045\022\047\023\062\024\063\025" +
    "\071\026\072\027\073\030\074\031\201\032\070\033\065" +
    "\034\064\001\001\000\002\001\001\000\046\007\076\012" +
    "\057\015\075\016\077\017\200\020\044\021\045\022\047" +
    "\023\062\024\063\025\071\026\072\027\073\030\074\031" +
    "\107\032\070\033\065\034\064\001\001\000\046\007\076" +
    "\012\057\015\075\016\077\017\177\020\044\021\045\022" +
    "\047\023\062\024\063\025\071\026\072\027\073\030\074" +
    "\031\107\032\070\033\065\034\064\001\001\000\046\007" +
    "\076\012\057\015\075\016\077\017\176\020\044\021\045" +
    "\022\047\023\062\024\063\025\071\026\072\027\073\030" +
    "\074\031\107\032\070\033\065\034\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\007\076\012\057\015\075\016\077\017\100\020" +
    "\044\021\045\022\047\023\062\024\063\025\071\026\072" +
    "\027\073\030\074\031\142\032\070\033\065\034\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\007\076\012\057\015\075\016\077\017" +
    "\100\020\044\021\045\022\047\023\062\024\063\025\071" +
    "\026\072\027\073\030\074\031\122\032\070\033\065\034" +
    "\064\001\001\000\050\007\076\012\057\015\075\016\077" +
    "\017\100\020\044\021\045\022\047\023\062\024\063\025" +
    "\071\026\072\027\073\030\074\031\113\032\070\033\065" +
    "\034\064\035\120\001\001\000\046\007\076\012\057\015" +
    "\117\016\077\017\100\020\044\021\045\022\047\023\062" +
    "\024\063\025\071\026\072\027\073\030\074\031\107\032" +
    "\070\033\065\034\064\001\001\000\046\007\076\012\057" +
    "\015\110\016\077\017\100\020\044\021\045\022\047\023" +
    "\062\024\063\025\071\026\072\027\073\030\074\031\107" +
    "\032\070\033\065\034\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\007\076\012\057\015\075\016\077\017\100\020\044\021" +
    "\045\022\047\023\062\024\063\025\071\026\072\027\073" +
    "\030\074\031\113\032\070\033\065\034\064\035\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\007\076" +
    "\012\057\015\075\016\077\017\100\020\044\021\045\022" +
    "\047\023\062\024\063\025\071\026\072\027\073\030\074" +
    "\031\113\032\070\033\065\034\064\035\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\007\076\012\057\015\075\016\077\017\100" +
    "\020\044\021\045\022\047\023\062\024\063\025\071\026" +
    "\072\027\137\030\074\031\107\032\070\033\065\034\064" +
    "\001\001\000\046\007\076\012\057\015\075\016\077\017" +
    "\100\020\044\021\045\022\047\023\062\024\063\025\071" +
    "\026\072\027\136\030\074\031\107\032\070\033\065\034" +
    "\064\001\001\000\046\007\076\012\057\015\075\016\077" +
    "\017\100\020\044\021\045\022\047\023\062\024\063\025" +
    "\133\026\072\027\073\030\074\031\107\032\070\033\065" +
    "\034\064\001\001\000\046\007\076\012\057\015\075\016" +
    "\077\017\100\020\044\021\045\022\047\023\062\024\063" +
    "\025\071\026\072\027\132\030\074\031\107\032\070\033" +
    "\065\034\064\001\001\000\046\007\076\012\057\015\075" +
    "\016\077\017\100\020\044\021\045\022\047\023\062\024" +
    "\063\025\071\026\072\027\131\030\074\031\107\032\070" +
    "\033\065\034\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\007\076\012\057\015\075" +
    "\016\077\017\100\020\044\021\045\022\047\023\062\024" +
    "\063\025\071\026\072\027\073\030\074\031\107\032\135" +
    "\033\065\034\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\007\076\012\057\015\075" +
    "\016\077\017\100\020\044\021\045\022\047\023\062\024" +
    "\063\025\071\026\072\027\141\030\074\031\107\032\070" +
    "\033\065\034\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\007\076\012\057\015\075" +
    "\016\077\017\100\020\044\021\045\022\047\023\175\024" +
    "\063\025\071\026\072\027\073\030\074\031\107\032\070" +
    "\033\065\034\064\001\001\000\046\007\076\012\057\015" +
    "\075\016\077\017\100\020\044\021\045\022\047\023\146" +
    "\024\063\025\071\026\072\027\073\030\074\031\107\032" +
    "\070\033\065\034\064\001\001\000\002\001\001\000\046" +
    "\007\076\012\057\015\075\016\077\017\100\020\044\021" +
    "\045\022\174\023\062\024\063\025\071\026\072\027\073" +
    "\030\074\031\107\032\070\033\065\034\064\001\001\000" +
    "\046\007\076\012\057\015\075\016\077\017\100\020\044" +
    "\021\045\022\173\023\062\024\063\025\071\026\072\027" +
    "\073\030\074\031\107\032\070\033\065\034\064\001\001" +
    "\000\046\007\076\012\057\015\075\016\077\017\100\020" +
    "\044\021\045\022\172\023\062\024\063\025\071\026\072" +
    "\027\073\030\074\031\107\032\070\033\065\034\064\001" +
    "\001\000\046\007\076\012\057\015\075\016\077\017\100" +
    "\020\044\021\045\022\153\023\062\024\063\025\071\026" +
    "\072\027\073\030\074\031\107\032\070\033\065\034\064" +
    "\001\001\000\002\001\001\000\046\007\076\012\057\015" +
    "\075\016\077\017\100\020\044\021\171\022\047\023\062" +
    "\024\063\025\071\026\072\027\073\030\074\031\107\032" +
    "\070\033\065\034\064\001\001\000\046\007\076\012\057" +
    "\015\075\016\077\017\100\020\044\021\156\022\047\023" +
    "\062\024\063\025\071\026\072\027\073\030\074\031\107" +
    "\032\070\033\065\034\064\001\001\000\002\001\001\000" +
    "\046\007\076\012\057\015\075\016\077\017\100\020\170" +
    "\021\045\022\047\023\062\024\063\025\071\026\072\027" +
    "\073\030\074\031\107\032\070\033\065\034\064\001\001" +
    "\000\046\007\076\012\057\015\075\016\077\017\100\020" +
    "\161\021\045\022\047\023\062\024\063\025\071\026\072" +
    "\027\073\030\074\031\107\032\070\033\065\034\064\001" +
    "\001\000\002\001\001\000\046\007\076\012\057\015\075" +
    "\016\077\017\167\020\044\021\045\022\047\023\062\024" +
    "\063\025\071\026\072\027\073\030\074\031\107\032\070" +
    "\033\065\034\064\001\001\000\046\007\076\012\057\015" +
    "\075\016\077\017\166\020\044\021\045\022\047\023\062" +
    "\024\063\025\071\026\072\027\073\030\074\031\107\032" +
    "\070\033\065\034\064\001\001\000\046\007\076\012\057" +
    "\015\075\016\077\017\165\020\044\021\045\022\047\023" +
    "\062\024\063\025\071\026\072\027\073\030\074\031\107" +
    "\032\070\033\065\034\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\206\007\015\010\207\036\006" +
    "\037\022\040\205\001\001\000\004\014\275\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\211\007\015" +
    "\010\207\036\006\037\022\040\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\215" +
    "\001\001\000\056\007\226\011\225\012\057\015\075\016" +
    "\077\017\100\020\044\021\045\022\047\023\062\024\063" +
    "\025\071\026\072\027\073\030\074\031\227\032\070\033" +
    "\065\034\064\036\006\037\022\040\231\001\001\000\012" +
    "\007\015\036\006\037\022\040\272\001\001\000\046\007" +
    "\076\012\057\015\075\016\077\017\100\020\044\021\045" +
    "\022\047\023\062\024\063\025\071\026\072\027\073\030" +
    "\074\031\270\032\070\033\065\034\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\247\001\001\000\056\007\226\011\241\012\057\015\075" +
    "\016\077\017\100\020\044\021\045\022\047\023\062\024" +
    "\063\025\071\026\072\027\073\030\074\031\227\032\070" +
    "\033\065\034\064\036\006\037\022\040\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\232\014\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\007\076\012\057\015\075" +
    "\016\077\017\100\020\044\021\045\022\047\023\062\024" +
    "\063\025\071\026\072\027\073\030\074\031\235\032\070" +
    "\033\065\034\064\001\001\000\002\001\001\000\056\007" +
    "\226\011\237\012\057\015\075\016\077\017\100\020\044" +
    "\021\045\022\047\023\062\024\063\025\071\026\072\027" +
    "\073\030\074\031\227\032\070\033\065\034\064\036\006" +
    "\037\022\040\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\007\076" +
    "\012\057\015\075\016\077\017\100\020\044\021\045\022" +
    "\047\023\062\024\063\025\071\026\072\027\073\030\074" +
    "\031\244\032\070\033\065\034\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\007\226" +
    "\011\225\012\057\015\075\016\077\017\100\020\044\021" +
    "\045\022\047\023\062\024\063\025\071\026\072\027\073" +
    "\030\074\031\227\032\070\033\065\034\064\036\006\037" +
    "\022\040\231\001\001\000\002\001\001\000\012\007\015" +
    "\036\006\037\022\040\252\001\001\000\006\013\253\014" +
    "\036\001\001\000\002\001\001\000\046\007\076\012\057" +
    "\015\075\016\077\017\100\020\044\021\045\022\047\023" +
    "\062\024\063\025\071\026\072\027\073\030\074\031\255" +
    "\032\070\033\065\034\064\001\001\000\002\001\001\000" +
    "\046\007\076\012\057\015\075\016\077\017\100\020\044" +
    "\021\045\022\047\023\062\024\063\025\071\026\072\027" +
    "\073\030\074\031\257\032\070\033\065\034\064\001\001" +
    "\000\002\001\001\000\056\007\226\011\261\012\057\015" +
    "\075\016\077\017\100\020\044\021\045\022\047\023\062" +
    "\024\063\025\071\026\072\027\073\030\074\031\227\032" +
    "\070\033\065\034\064\036\006\037\022\040\231\001\001" +
    "\000\002\001\001\000\046\007\076\012\057\015\075\016" +
    "\077\017\100\020\044\021\045\022\047\023\062\024\063" +
    "\025\071\026\072\027\073\030\074\031\263\032\070\033" +
    "\065\034\064\001\001\000\002\001\001\000\056\007\226" +
    "\011\265\012\057\015\075\016\077\017\100\020\044\021" +
    "\045\022\047\023\062\024\063\025\071\026\072\027\073" +
    "\030\074\031\227\032\070\033\065\034\064\036\006\037" +
    "\022\040\231\001\001\000\002\001\001\000\056\007\226" +
    "\011\267\012\057\015\075\016\077\017\100\020\044\021" +
    "\045\022\047\023\062\024\063\025\071\026\072\027\073" +
    "\030\074\031\227\032\070\033\065\034\064\036\006\037" +
    "\022\040\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public cpp.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (cpp.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		cpp.Absyn.Program start_val = (cpp.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListDef 
            {
              cpp.Absyn.Program RESULT =null;
		cpp.Absyn.ListDef p_1 = (cpp.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.PDefs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListDef ::= 
            {
              cpp.Absyn.ListDef RESULT =null;
		 RESULT = new cpp.Absyn.ListDef(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDef",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListDef ::= ListDef Def 
            {
              cpp.Absyn.ListDef RESULT =null;
		cpp.Absyn.ListDef p_1 = (cpp.Absyn.ListDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cpp.Absyn.Def p_2 = (cpp.Absyn.Def)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDef",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Def ::= Type Id _SYMB_0 ListArg _SYMB_1 _SYMB_2 ListStm _SYMB_3 
            {
              cpp.Absyn.Def RESULT =null;
		cpp.Absyn.Type p_1 = (cpp.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		cpp.Absyn.ListArg p_4 = (cpp.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		cpp.Absyn.ListStm p_7 = (cpp.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new cpp.Absyn.DFun(p_1,p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Def ::= Type Id _SYMB_0 ListArg _SYMB_1 _SYMB_4 
            {
              cpp.Absyn.Def RESULT =null;
		cpp.Absyn.Type p_1 = (cpp.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		cpp.Absyn.ListArg p_4 = (cpp.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new cpp.Absyn.DFunBody(p_1,p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Def ::= _SYMB_49 ListId _SYMB_4 
            {
              cpp.Absyn.Def RESULT =null;
		cpp.Absyn.ListId p_2 = (cpp.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new cpp.Absyn.DUsing(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Def ::= Type ListVar _SYMB_4 
            {
              cpp.Absyn.Def RESULT =null;
		cpp.Absyn.Type p_1 = (cpp.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.ListVar p_2 = (cpp.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new cpp.Absyn.DInit(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Def ::= _SYMB_48 Type Id _SYMB_4 
            {
              cpp.Absyn.Def RESULT =null;
		cpp.Absyn.Type p_2 = (cpp.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new cpp.Absyn.DTD(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ListArg ::= 
            {
              cpp.Absyn.ListArg RESULT =null;
		 RESULT = new cpp.Absyn.ListArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListArg ::= Arg 
            {
              cpp.Absyn.ListArg RESULT =null;
		cpp.Absyn.Arg p_1 = (cpp.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListArg ::= Arg _SYMB_5 ListArg 
            {
              cpp.Absyn.ListArg RESULT =null;
		cpp.Absyn.Arg p_1 = (cpp.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.ListArg p_3 = (cpp.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ListStm ::= 
            {
              cpp.Absyn.ListStm RESULT =null;
		 RESULT = new cpp.Absyn.ListStm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListStm ::= ListStm Stm 
            {
              cpp.Absyn.ListStm RESULT =null;
		cpp.Absyn.ListStm p_1 = (cpp.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cpp.Absyn.Stm p_2 = (cpp.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListId ::= Id 
            {
              cpp.Absyn.ListId RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.ListId(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListId",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ListId ::= Id _SYMB_6 ListId 
            {
              cpp.Absyn.ListId RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.ListId p_3 = (cpp.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListId",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Arg ::= Type Var 
            {
              cpp.Absyn.Arg RESULT =null;
		cpp.Absyn.Type p_1 = (cpp.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cpp.Absyn.Var p_2 = (cpp.Absyn.Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.ADecl(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Arg ::= Type 
            {
              cpp.Absyn.Arg RESULT =null;
		cpp.Absyn.Type p_1 = (cpp.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.ADeclInit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Stm ::= Exp _SYMB_4 
            {
              cpp.Absyn.Stm RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new cpp.Absyn.SExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stm ::= Type ListVar _SYMB_4 
            {
              cpp.Absyn.Stm RESULT =null;
		cpp.Absyn.Type p_1 = (cpp.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.ListVar p_2 = (cpp.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new cpp.Absyn.SInit(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stm ::= _SYMB_45 Exp _SYMB_4 
            {
              cpp.Absyn.Stm RESULT =null;
		cpp.Absyn.Exp p_2 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new cpp.Absyn.SReturn(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stm ::= _SYMB_51 _SYMB_0 Exp _SYMB_1 Stm 
            {
              cpp.Absyn.Stm RESULT =null;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Stm p_5 = (cpp.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.SWhile(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stm ::= _SYMB_2 ListStm _SYMB_3 
            {
              cpp.Absyn.Stm RESULT =null;
		cpp.Absyn.ListStm p_2 = (cpp.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new cpp.Absyn.SBlock(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stm ::= _SYMB_43 _SYMB_0 Exp _SYMB_1 Stm 
            {
              cpp.Absyn.Stm RESULT =null;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Stm p_5 = (cpp.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.SIf(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stm ::= _SYMB_43 _SYMB_0 Exp _SYMB_1 Stm _SYMB_40 Stm 
            {
              cpp.Absyn.Stm RESULT =null;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		cpp.Absyn.Stm p_5 = (cpp.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Stm p_7 = (cpp.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.SIfElse(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stm ::= _SYMB_42 _SYMB_0 Type ListVar _SYMB_4 Exp _SYMB_4 Exp _SYMB_1 Stm 
            {
              cpp.Absyn.Stm RESULT =null;
		cpp.Absyn.Type p_3 = (cpp.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		cpp.Absyn.ListVar p_4 = (cpp.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		cpp.Absyn.Exp p_6 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		cpp.Absyn.Exp p_8 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Stm p_10 = (cpp.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.SFor(p_3,p_4,p_6,p_8,p_10); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stm ::= _SYMB_38 Stm _SYMB_51 _SYMB_0 Exp _SYMB_1 _SYMB_4 
            {
              cpp.Absyn.Stm RESULT =null;
		cpp.Absyn.Stm p_2 = (cpp.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		cpp.Absyn.Exp p_5 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new cpp.Absyn.SDoWhile(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Stm ::= _SYMB_48 Type Id _SYMB_4 
            {
              cpp.Absyn.Stm RESULT =null;
		cpp.Absyn.Type p_2 = (cpp.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new cpp.Absyn.STD(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListString ::= _STRING_ 
            {
              cpp.Absyn.ListString RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.ListString(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListString",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListString ::= _STRING_ ListString 
            {
              cpp.Absyn.ListString RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cpp.Absyn.ListString p_2 = (cpp.Absyn.ListString)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListString",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListVar ::= Var 
            {
              cpp.Absyn.ListVar RESULT =null;
		cpp.Absyn.Var p_1 = (cpp.Absyn.Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.ListVar(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVar",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListVar ::= Var _SYMB_5 ListVar 
            {
              cpp.Absyn.ListVar RESULT =null;
		cpp.Absyn.Var p_1 = (cpp.Absyn.Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.ListVar p_3 = (cpp.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVar",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Var ::= Id 
            {
              cpp.Absyn.Var RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.VarDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Var ::= Id _SYMB_7 Exp 
            {
              cpp.Absyn.Var RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.VarInit(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp15 ::= _INTEGER_ 
            {
              cpp.Absyn.Exp RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp15 ::= _DOUBLE_ 
            {
              cpp.Absyn.Exp RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp15 ::= ListString 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.ListString p_1 = (cpp.Absyn.ListString)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EString(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp15 ::= _SYMB_47 
            {
              cpp.Absyn.Exp RESULT =null;
		 RESULT = new cpp.Absyn.ETrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp15 ::= _SYMB_41 
            {
              cpp.Absyn.Exp RESULT =null;
		 RESULT = new cpp.Absyn.EFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp15 ::= Exp _SYMB_0 ListExp _SYMB_1 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		cpp.Absyn.ListExp p_3 = (cpp.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new cpp.Absyn.EApp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp15 ::= _CHAR_ 
            {
              cpp.Absyn.Exp RESULT =null;
		Character p_1 = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EChar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp15 ::= ListId 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.ListId p_1 = (cpp.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EQCon(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp15 ::= _SYMB_0 Exp _SYMB_1 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_2 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp15",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp14 ::= Exp14 _SYMB_0 ListExp _SYMB_1 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		cpp.Absyn.ListExp p_3 = (cpp.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new cpp.Absyn.ECall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp14 ::= Exp14 _SYMB_8 Exp15 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EStrDot(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp14 ::= Exp14 _SYMB_9 Exp15 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EStrArr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp14 ::= Exp14 _SYMB_10 Exp _SYMB_11 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new cpp.Absyn.EIdx(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp14 ::= Exp14 _SYMB_12 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new cpp.Absyn.EPIncr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp14 ::= Exp14 _SYMB_13 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new cpp.Absyn.EPDecr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Exp14 ::= Exp15 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp14",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exp13 ::= _SYMB_12 Exp13 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_2 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EIncr(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp13",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exp13 ::= _SYMB_13 Exp13 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_2 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EDecr(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp13",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Exp13 ::= _SYMB_14 Exp13 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_2 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.ENeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp13",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exp13 ::= _SYMB_15 Exp13 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_2 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EMul(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp13",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exp13 ::= Exp14 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp13",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Exp12 ::= Exp12 _SYMB_15 Exp13 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.ETimes(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Exp12 ::= Exp12 _SYMB_16 Exp13 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EDiv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Exp12 ::= Exp12 _SYMB_17 Exp13 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EMod(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Exp12 ::= Exp13 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp12",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Exp11 ::= Exp11 _SYMB_18 Exp12 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EPlus(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Exp11 ::= Exp11 _SYMB_19 Exp12 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EMinus(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exp11 ::= Exp12 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp11",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exp10 ::= Exp10 _SYMB_20 Exp11 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.ERS(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp10 ::= Exp10 _SYMB_21 Exp11 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.ELS(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp10 ::= Exp11 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp10",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp9 ::= Exp9 _SYMB_22 Exp10 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.ELt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp9 ::= Exp9 _SYMB_23 Exp10 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EGt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp9 ::= Exp9 _SYMB_24 Exp10 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.ELtEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp9 ::= Exp9 _SYMB_25 Exp10 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EGtWq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp9 ::= Exp10 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp9",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp8 ::= Exp8 _SYMB_26 Exp9 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp8 ::= Exp8 _SYMB_27 Exp9 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.ENEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp8 ::= Exp9 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp8",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp4 ::= Exp4 _SYMB_28 Exp5 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EAnd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp4 ::= Exp5 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp3 ::= Exp3 _SYMB_29 Exp4 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EOr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp3 ::= Exp4 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp2 ::= Exp3 _SYMB_7 Exp2 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EAss(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp2 ::= Exp3 _SYMB_30 Exp2 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EAssAdd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp2 ::= Exp3 _SYMB_31 Exp2 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EAssSub(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp2 ::= Exp3 _SYMB_32 Exp2 _SYMB_33 Exp2 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		cpp.Absyn.Exp p_3 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.Exp p_5 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.ECond(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp2 ::= Exp3 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp1 ::= _SYMB_46 Exp 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_2 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.EThrow(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp1 ::= Exp2 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp ::= Exp1 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp5 ::= Exp6 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp5",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp6 ::= Exp7 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp6",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp7 ::= Exp8 
            {
              cpp.Absyn.Exp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp7",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ListExp ::= 
            {
              cpp.Absyn.ListExp RESULT =null;
		 RESULT = new cpp.Absyn.ListExp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ListExp ::= Exp 
            {
              cpp.Absyn.ListExp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.ListExp(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ListExp ::= Exp _SYMB_5 ListExp 
            {
              cpp.Absyn.ListExp RESULT =null;
		cpp.Absyn.Exp p_1 = (cpp.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp.Absyn.ListExp p_3 = (cpp.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PType ::= _SYMB_35 
            {
              cpp.Absyn.PType RESULT =null;
		 RESULT = new cpp.Absyn.Tbool(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PType",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PType ::= _SYMB_39 
            {
              cpp.Absyn.PType RESULT =null;
		 RESULT = new cpp.Absyn.Tdouble(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PType",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PType ::= _SYMB_44 
            {
              cpp.Absyn.PType RESULT =null;
		 RESULT = new cpp.Absyn.Tint(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PType",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PType ::= _SYMB_50 
            {
              cpp.Absyn.PType RESULT =null;
		 RESULT = new cpp.Absyn.Tvoid(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PType",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PType ::= _SYMB_36 
            {
              cpp.Absyn.PType RESULT =null;
		 RESULT = new cpp.Absyn.TChar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PType",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PType ::= ListId 
            {
              cpp.Absyn.PType RESULT =null;
		cpp.Absyn.ListId p_1 = (cpp.Absyn.ListId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.TQCon(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PType",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // RType ::= PType 
            {
              cpp.Absyn.RType RESULT =null;
		cpp.Absyn.PType p_1 = (cpp.Absyn.PType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.TPType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RType",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // RType ::= RType _SYMB_34 
            {
              cpp.Absyn.RType RESULT =null;
		cpp.Absyn.RType p_1 = (cpp.Absyn.RType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new cpp.Absyn.TRef(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RType",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Type ::= RType 
            {
              cpp.Absyn.Type RESULT =null;
		cpp.Absyn.RType p_1 = (cpp.Absyn.RType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.TRType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Type ::= _SYMB_37 RType 
            {
              cpp.Absyn.Type RESULT =null;
		cpp.Absyn.RType p_2 = (cpp.Absyn.RType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp.Absyn.TConst(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",30, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
